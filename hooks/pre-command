#!/bin/bash
# shellcheck disable=SC2001
# shellcheck disable=SC1091
# shellcheck disable=SC2086
# shellcheck disable=SC1090

set -euo pipefail

BK_CACHE_BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"
BK_CACHE_VERSION=$(<"$BK_CACHE_BASEDIR/VERSION")

. "$BK_CACHE_BASEDIR/lib/shared.bash"

echo -e "~~~ :bash: \033[33mCache\033[0m Buildkite Plugin v$BK_CACHE_VERSION"

if [[ "${BUILDKITE_PLUGIN_CACHE_DEBUG:-false}" =~ (true|on|1) ]]; then
  set -x
fi

if [[ "${BUILDKITE_PLUGIN_CACHE_PR:-true}" =~ (false|off|0) ]]; then
  if [[ ! "${BUILDKITE_PULL_REQUEST:-false}" =~ (false) ]]; then
    echo "PR Detected. Skipping..."
    exit 0
  fi
fi

if [[ -n "${BUILDKITE_PLUGIN_CACHE_KEY:-}" ]]; then

  # Defaults...
  BK_CACHE_BACKEND="${BUILDKITE_PLUGIN_CACHE_BACKEND:-tarball}"

  CACHE_KEY="$(expand_templates "$BUILDKITE_PLUGIN_CACHE_KEY")"

  echo "🔍 Looking for $CACHE_KEY"

  if [ -f "$BK_CACHE_BASEDIR/lib/backends/$BK_CACHE_BACKEND.bash" ]; then
    . "$BK_CACHE_BASEDIR/lib/backends/$BK_CACHE_BACKEND.bash"
    restore
  else
    echo "🚨 $BK_CACHE_BACKEND is not supported or not provided. Soft failing..."
    exit 0
  fi

else
  echo "🚨 Cache is skipped because no cache key provided"
  exit 0
fi
