#!/bin/bash
# shellcheck disable=SC2001

set -euo pipefail

if [[ "${BUILDKITE_PLUGIN_CACHE_DEBUG:-false}" =~ (true|on|1) ]]; then
  set -x
fi

if [[ -n "${BUILDKITE_PLUGIN_CACHE_CACHE_KEY:-}" ]]; then
  AWS_ARGS=""
  if [[ -n "${BUILDKITE_PLUGIN_CACHE_S3_PROFILE:-}" ]]; then
    AWS_ARGS="--profile ${BUILDKITE_PLUGIN_CACHE_S3_PROFILE}"
  fi
  cache_key_prefix=$(echo "$BUILDKITE_PLUGIN_CACHE_CACHE_KEY" | sed -e 's/{.*//')
  template_value=$(echo "$BUILDKITE_PLUGIN_CACHE_CACHE_KEY" | sed -e 's/^[^\{{]*[^A-Za-z]*//' -e 's/.}}.*$//' | tr -d \' | tr -d \")
  if [[ $template_value == *"checksum"* ]]; then
    target="$(echo -e "${template_value/"checksum"/""}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
      hasher="sha1sum"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
      hasher="shasum"
    else
      # fallback to sha1sum
      hasher="sha1sum"
    fi
    result=$(find "$target" -type f | xargs -d'\n' -P0 -n1 $hasher | sort -k 2 | $hasher | awk '{print $1}')
    cache_key="$cache_key_prefix$result"
  else
    cache_key=$BUILDKITE_PLUGIN_CACHE_CACHE_KEY
  fi

  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    rsync_args="--ignore-missing-args"
  else
    rsync_args=""
  fi
  if [[ -n "${BUILDKITE_PLUGIN_CACHE_RSYNC_STORAGE:-}" ]]; then
    cache_prefix="${BUILDKITE_PLUGIN_CACHE_RSYNC_STORAGE}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"

    mkdir -p "${cache_prefix}/${cache_key}"
    rsync -a $rsync_args "${cache_prefix}/${cache_key}/" .
  elif [[ -n "${BUILDKITE_PLUGIN_CACHE_TARBALL_STORAGE:-}" ]]; then
    cache_prefix="${BUILDKITE_PLUGIN_CACHE_TARBALL_STORAGE}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"
    mkdir -p "${cache_prefix}/${BUILDKITE_PIPELINE_SLUG}"
    TAR_FILE="${cache_prefix}/${cache_key}.tar"

    if [ -f "$TAR_FILE" ]; then
      echo "Cache hit: ${cache_key}"
      tar -xf "${TAR_FILE}" -C .
    fi
  elif [[ -n "${BUILDKITE_PLUGIN_CACHE_S3_STORAGE:-}" ]]; then
    echo ":aws: :amazon-s3: sync ${cache_key}"

    TAR_FILE="${cache_key}.tar"
    bucket="${BUILDKITE_PLUGIN_CACHE_S3_BUCKET_NAME}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"
    tkey="${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}"

    aws s3api head-object --bucket "${BUILDKITE_PLUGIN_CACHE_S3_BUCKET_NAME}" --key "${tkey}/${TAR_FILE}" || no_head=true

    if ${no_head:-false}; then
      echo "Cache restore is skipped because s3://${bucket}/${TAR_FILE} does not exist"
    else
      echo "Cache hit: s3://${bucket}/${TAR_FILE}"
      aws s3 cp "s3://${bucket}/${TAR_FILE}" . $AWS_ARGS
      tar -xf "${TAR_FILE}" -C .
    fi
  fi
else
  echo "Cache is skipped because no cache key provided"
  exit 0
fi
