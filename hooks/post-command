#!/bin/bash
# shellcheck disable=SC2001
# shellcheck disable=SC1091
# shellcheck disable=SC2086
# shellcheck disable=SC1090

set -euo pipefail

BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)"
. "$BASEDIR/lib/shared.bash"

echo -e "~~~ :bash: Processing Post-Cache..."

if [[ "${BUILDKITE_PLUGIN_CACHE_DEBUG:-false}" =~ (true|on|1) ]]; then
  set -x
fi

if [ "${BUILDKITE_COMMAND_EXIT_STATUS}" -ne 0 ]; then
  echo "--- ðŸš¨ Cache is skipped because step returned ${BUILDKITE_COMMAND_EXIT_STATUS}"
  exit 0
fi

if [[ "${BUILDKITE_PLUGIN_CACHE_PR:-true}" =~ (false|off|0) ]]; then
  if [[ ! "${BUILDKITE_PULL_REQUEST:-false}" =~ (false) ]]; then
    echo "PR Detected. Skipping..."
    exit 0
  fi
fi

if [[ -n "${BUILDKITE_PLUGIN_CACHE_KEY:-}" ]]; then

  # Defaults...
  BACKEND="${BUILDKITE_PLUGIN_CACHE_BACKEND:-tarball}"
  CACHE_KEY="$(expand_templates "$BUILDKITE_PLUGIN_CACHE_KEY")"

  cache_locating "$CACHE_KEY"

  paths=()

  if [[ -n "${BUILDKITE_PLUGIN_CACHE_PATHS:-}" ]]; then
    paths+=("$BUILDKITE_PLUGIN_CACHE_PATHS")
  fi

  while IFS='=' read -r path _; do
    if [[ $path =~ ^(BUILDKITE_PLUGIN_CACHE_PATHS_[0-9]+) ]]; then
      paths+=("${!path}")
    fi
  done < <(env | sort)

  if [ -f "$BASEDIR/lib/backends/$BACKEND.bash" ]; then
    . "$BASEDIR/lib/backends/$BACKEND.bash"
    cache
  else
    echo "ðŸš¨ $BACKEND is not supported or not provided. Soft failing..."
    exit 0
  fi
else
  echo "ðŸš¨ Cache is skipped because no cache key provided."
  exit 0
fi
